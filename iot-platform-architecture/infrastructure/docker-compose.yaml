services:

  app:
    build: ../../event-collector/
    container_name: event-collector
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    environment:
      PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      SCHEMA_REGISTRY_URL: ${SCHEMA_REGISTRY_URL}
      CASSANDRA_USERNAME: ${CASSANDRA_USERNAME}
      CASSANDRA_PASSWORD: ${CASSANDRA_PASSWORD}
      CASSANDRA_KEYSPACE_NAME: ${CASSANDRA_KEYSPACE}
      CASSANDRA_CONTACT_POINTS: ${CASSANDRA_CONTACT_POINTS}
      SERVER_PORT: ${SERVER_PORT}
      ALLOY_URL: ${ALLOY_URL}
    ports:
      - "9050:${SERVER_PORT}"
    networks:
      - observability-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok" ]
      interval: 10s
      timeout: 5s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: schema-registry
    ports:
      - "8081:8081"
    volumes:
      - schema_registry_data:/etc/schema-registry
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/subjects" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    hostname: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - kafka1_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - observability-net

  debezium:
    image: debezium/connect:2.5
    container_name: debezium
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "--fail", "--silent", "http://localhost:8083/connectors" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - observability-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8070:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - KAFKA_CLUSTERS_0_SCHEMAREGISTRY=http://schema-registry:8081
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8080" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9187/metrics" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-exporter:
    image: danielqsj/kafka-exporter
    container_name: kafka-exporter
    ports:
      - "9308:9308"
    restart: unless-stopped
    command:
      - "--kafka.server=kafka:9092"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9308/metrics" ]
      interval: 10s
      timeout: 5s
      retries: 5

  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
      - '--no-collector.netstat'
      - '--no-collector.netclass'
    privileged: true
    user: root
    volumes:
      - '/:/host:ro'
      - '/proc:/host/proc:ro'
      - '/sys:/host/sys:ro'
      - '/run:/host/run:ro'
    networks:
      - observability-net
    ports:
      - "9100:9100"
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:9100/metrics | grep -q 'node_' || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  cassandra:
    image: cassandra:latest
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_USER: ${CASSANDRA_USERNAME}
      CASSANDRA_PASSWORD: ${CASSANDRA_PASSWORD}
    volumes:
      - cassandradata:/var/lib/cassandra
    healthcheck:
      test: [ "CMD", "cqlsh", "-e", "describe keyspaces" ]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - observability-net

  cassandra-init:
    image: cassandra:4
    depends_on:
      cassandra:
        condition: service_healthy
    volumes:
      - ./cassandra/init.cql:/init.cql:ro
    command: cqlsh -u cassandra -p cassandra cassandra -f /init.cql;
    networks:
      - observability-net

  debezium-init:
    image: curlimages/curl:latest  # ← Используем официальный curl образ
    depends_on:
      debezium:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./debezium-config.json:/debezium-config.json:ro
    command: >
      
      curl -i -X POST -H 'Content-Type: application/json' \
        --data @/debezium-config.json \
        http://debezium:8083/connectors;
      
      echo 'Debezium configuration completed!';
      echo 'Listing connectors:';
      curl -s http://debezium:8083/connectors | jq .;
    networks:
      - observability-net

  camunda:
    image: camunda/camunda-bpm-platform:latest
    container_name: camunda
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8088:8080"
    environment:
      DB_DRIVER: org.postgresql.Driver
      DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - observability-net

  minio:
    image: minio/minio:RELEASE.2024-05-28T17-19-04Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3

  #Security
  keycloak:
    image: quay.io/keycloak/keycloak:21.0.1
    container_name: keycloak
    depends_on:
      keycloak-db:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-db
      KC_DB_PORT: 5432
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KC_DB_URL_DATABASE: ${KEYCLOAK_DB_NAME}
      KC_HOSTNAME: "localhost"
    command: start-dev
    networks:
      - observability-net

  #DB
  keycloak-db:
    image: postgres:14-alpine
    container_name: keycloak-db
    restart: unless-stopped
    ports:
      - "5433:5432"
    volumes:
      - keycloak_postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      POSTGRES_DB: ${KEYCLOAK_DB_NAME}
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${KEYCLOAK_DB_USER}" ]
      interval: 10s
      retries: 5

  postgres:
    image: postgres:14-alpine
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    #      - ./postgres:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 5s
      retries: 5

  redisinsight:
    image: redislabs/redisinsight:latest
    ports:
      - '8001:8001'
    volumes:
      - redisinsight_data:/db
    depends_on:
      - redis

  #Observability
  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    user: "root"
    volumes:
      - ./monitoring/loki/loki-config.yaml:/etc/loki/loki-config.yaml:ro
      - loki_chunks:/tmp/loki/chunks
      - loki_index:/tmp/loki/index
      - loki_rules:/tmp/loki/rules
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3100/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    user: root
    ports:
      - "9080:9080"  # HTTP-интерфейс Alloy (по умолчанию)
      - "4317:4317"   # OTLP gRPC (важно!)
      - "4318:4318"   # OTLP HTTP (если нужен)
    volumes:
      - ./monitoring/alloy/config.alloy:/etc/alloy/config.alloy:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/log:/var/log:ro
    environment:
      GRAFANA_LOKI_URL: http://loki:3100/loki/api/v1/push  # локальный Loki
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:9080
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy
    depends_on:
      tempo:
        condition: service_healthy
    networks:
      - observability-net

  tempo:
    image: grafana/tempo:2.4.1
    container_name: tempo
    command: [ "-config.file=/etc/tempo/tempo.yaml" ]
    volumes:
      - ./monitoring/tempo/tempo.yaml:/etc/tempo/tempo.yaml
      - tempo_data:/var/tempo
    depends_on:
      create-tempo-bucket:
        condition: service_healthy
    ports:
      - "3200:3200"
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3200/status" ]
      interval: 10s
      timeout: 5s
      retries: 5

  create-tempo-bucket:
    image: minio/mc
    container_name: create-tempo-bucket
    entrypoint: >
      /bin/sh -c "
        sleep 10 && \
        mc alias set minio http://minio:9000 ${MINIO_USER} ${MINIO_PASSWORD} && \
        mc mb -p minio/tempo && \
        mc anonymous set download minio/tempo && \
        touch /tmp/bucket-ready && \
        tail -f /dev/null
      "
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "test", "-f", "/tmp/bucket-ready" ]
      interval: 5s
      timeout: 3s
      retries: 10

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9090/-/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      loki:
        condition: service_healthy
      tempo:
        condition: service_healthy

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_NAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    networks:
      - observability-net
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
      tempo:
        condition: service_healthy
      alloy:
        condition: service_started


volumes:
  postgres_data:
  grafana_data:
  cassandradata:
  kafka1_data:
  schema_registry_data:
  minio_data:
  loki_chunks:
  loki_index:
  loki_rules:
  tempo_data:
  grafana-storage:
  bucket-init:
  keycloak_postgres_data:
  redisinsight_data:

networks:
  observability-net:
    driver: bridge