plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id "com.github.davidmc24.gradle.plugin.avro" version "1.9.1"
 	id 'org.flywaydb.flyway' version "11.11.1"
}

group = 'event-collector'
version = '0.0.1-SNAPSHOT'
description = 'event-collector'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(24)
	}
}

sourceSets {
	integrationTest {
		java.srcDir file('src/test/java/')
		resources.srcDir file('src/test/resources')
		compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
		runtimeClasspath += output + compileClasspath
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

repositories {
	mavenCentral()
	maven {
		url = 'https://packages.confluent.io/maven/'
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'org.flywaydb:flyway-gradle-plugin:11.11.1'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-cassandra'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.flywaydb:flyway-core'
	testImplementation 'org.testcontainers:postgresql'
	compileOnly 'org.projectlombok:lombok'
	implementation "org.apache.avro:avro:1.11.4"
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.testcontainers:cassandra'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:kafka'
	runtimeOnly 'org.postgresql:postgresql'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'io.confluent:kafka-avro-serializer:7.5.3'
	implementation 'io.confluent:kafka-schema-registry-client:7.5.3'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// Метрики → Prometheus
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	// Трейсинг → Tempo (через OpenTelemetry)
	implementation 'io.micrometer:micrometer-tracing-bridge-otel'
	implementation 'io.opentelemetry:opentelemetry-exporter-otlp'
}

avro {

}

tasks.named('test') {
	useJUnitPlatform()
	include '**/*Test.class'
	exclude '**/*IT.class'
	exclude '**/*IntegrationTest.class'
}

tasks.register('integrationTest', Test) {
	description = "Runs integration tests."
	group = "verification"
	testClassesDirs = sourceSets.test.output.classesDirs
	classpath = sourceSets.test.runtimeClasspath
	useJUnitPlatform()
	include '**/*IT.class'
	include '**/*IntegrationTest.class'
	exclude '**/*Test.class'
}

tasks.register('allTests') {
	description = "Runs both unit and integration tests."
	group = "verification"
	dependsOn test, integrationTest
}

tasks.named('bootJar') {
	enabled = true
}
tasks.named('jar') {
	enabled = false
}

